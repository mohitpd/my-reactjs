## Create React App
npx create-react-app .

## Start React Application
npm start

## Tailwind with React
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

## tailwind.config.js file:
module.exports = {
    content: ['./src/**/*.{js,jsx,ts,tsx}'],
    corePlugins: {preflight: false},
    theme: {
        extend: {},
    },
    plugins: [],
};

## styles/tailwind.css file:
@tailwind base;
@tailwind components;
@tailwind utilities;

## Edit Scripts of package.json:
"build-css": "tailwindcss -i ./src/styles/tailwind.css -o ./src/style.css --watch",


## Bundle
React will transpile all the files into a bundle file.

## When we run the development server it is going to search for the src directory.

## By default we need a src/index.js file

## to create react Application:
import React from 'react'
## to connect with index.html:
import ReactDOM from 'react-dom'

## we need to build components in react Application
it can be a class or function
it always needs to return some code

## Functional components:
Do all types of Javascript stuffs and then return a jsx.

## class components uses methods to return the jsx.
the jsx is returned inside the render() met

## Use Synthetic events
onClick={()=>this.eventHandler()}

## state
this is an object inside a class component that can store multiple values.
to change a value of a state property we use 
this.setState({
    key: newValue
})

we can pass the state as a parameter to setState:
this.setState((state,props)=>{
    count:state.count+1
})

## props
We can pass functions and data between components back and forward
<NewsList news={this.state.news}/>
 
## Lifecycles:
in class components there are multiple lifecycle methods that can be used to override the process at particular times.

## nextState:
it is the next form of the state

## prevState:
The previous form of the state

## hooks:
it is used to perform many react features without using classes
https://reactjs.org/docs/hooks-reference.html


# React Routes
## Installation
npm install react-router-dom

## create routes in a react app
import {BrowserRouter, Link, Route, Routes} from 'react-router-dom';

<BrowserRouter> is used to cover the main component in our case it is app.js
enclose the route components with <Routes>
Each route component is created using 
<Route path='/posts' element={<Post />} />
To create links to the particular route component
<Link to={'/'}>Home</Link>
<Link to={'/posts'}>Post</Link>

## To add url parameter to a path use:
<Route path='/posts/:id' element={<PostItem />} />
use ':parameter' in the path of the route.
Inside the component file. Use
let params = useParams();
and use params.id or params.parameter to fetch the value of the url parameter dynamically
Navigate: Use Navigate with parameters to navigate a path to a specific path under specific condition


## PureComponent
when a class is built using PureComponent is helps when there is no change in the state. it checks and does not re reender the "render()" method. This can also be done using Functional components.

## React components can return array of jsx.

## HOC Higher Order Components:
This is a method to include Higher components and include props.children inside the HOC. We can apply conditions on the HOC. Like for Authentication.


## Transitions:
Installation:
npm i react-transition-group

it is used to define transitions for an element. it results into a variable called "state". It gets the values of enterring, entered, exiting, exited. which can be used to add transition css manually to those elements.
## CSSTransitions:
It is same as Transitions in this it itself adds classes to the element. 
## Transitions Group:
this is used to work with groups of element. 
For example an array of elements.

## Redux:
Installation:
npm i redux --save
npm i react-redux --save

## To make requests:
npm i axios --save